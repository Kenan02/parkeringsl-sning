#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include "nordic_common.h"
#include "nrf_sdm.h"
#include "ble.h"
#include "ble_hci.h"
#include "ble_conn_params.h"
#include "ble_srv_common.h"
#include "ble_advdata.h"
#include "nrf_sdh.h"
#include "nrf_ble_qwr.h"
#include "nrf_sdh_ble.h"
#include "nrf_sdh_soc.h"
#include "app_util.h"
#include "peer_manager_types.h"

#include "app_error.h"
#include "app_util.h"
#include "ble_lbs.h"
#include "ble_gap.h"
#include "app_timer.h"
#include "bsp_btn_ble.h"
#include "peer_manager.h"
#include "peer_manager_handler.h"
#include "ble_advertising.h"
#include "fds.h"
#include "nrf_fstorage.h"
#include "ble_conn_state.h"
#include "nrf_ble_gatt.h"
#include "nrf_ble_scan.h"
#include "nrf_pwr_mgmt.h"

#include "nrf_log.h"
#include "nrf_log_ctrl.h"
#include "nrf_log_default_backends.h"


#define APP_BLE_CONN_CFG_TAG      1                                /**< A tag identifying the SoftDevice BLE configuration. */
#define APP_BLE_OBSERVER_PRIO     3                                /**< Application's BLE observer priority. You shouldn't need to modify this value. */
#define APP_SOC_OBSERVER_PRIO     1                                /**< Applications' SoC observer priority. You shouldn't need to modify this value. */

#define SEC_PARAM_BOND            1                                /**< Perform bonding. */
#define SEC_PARAM_MITM            0                                /**< Man In The Middle protection not required. */
#define SEC_PARAM_LESC            0                                /**< LE Secure Connections not enabled. */
#define SEC_PARAM_KEYPRESS        0                                /**< Keypress notifications not enabled. */
#define SEC_PARAM_IO_CAPABILITIES BLE_GAP_IO_CAPS_NONE             /**< No I/O capabilities. */
#define SEC_PARAM_OOB             0                                /**< Out Of Band data not available. */
#define SEC_PARAM_MIN_KEY_SIZE    7                                /**< Minimum encryption key size. */
#define SEC_PARAM_MAX_KEY_SIZE    16                               /**< Maximum encryption key size. */

#define SCAN_DURATION_WITELIST    2500                            /**< Duration of the scanning in units of 10 milliseconds. */
#define PAUSE_SCANNING_DURATION   10000                            /**< 10 sekunder "sov" tid mellan varje scan. */
#define REST_TIMER_INTERVAL       APP_TIMER_TICKS(PAUSE_SCANNING_DURATION)
#define SCAN_TIMER_INTERVAL       APP_TIMER_TICKS(30000)
#define CONNECTED_TIME            APP_TIMER_TICKS(5000)
#define APP_ADV_INTERVAL          800
#define APP_ADV_DURATION          BLE_GAP_ADV_TIMEOUT_GENERAL_UNLIMITED

#define MIN_CONN_INTERVAL         MSEC_TO_UNITS(100, UNIT_1_25_MS)
#define MAX_CONN_INTERVAL         MSEC_TO_UNITS(200, UNIT_1_25_MS)
#define CONN_SUP_TIMEOUT          MSEC_TO_UNITS(4000, UNIT_1_25_MS)
#define SLAVE_LATENCY             0

#define FIRST_CONN_PARAMS_UPDATE_DELAY APP_TIMER_TICKS(20000)
#define NEXT_CONN_PARAMS_UPDATE_DELAY  APP_TIMER_TICKS(5000)
#define MAX_CONN_PARAMS_UPDATE_COUNT   9


#define DKDEVICE_NAME             "DK"
#define TARGET_UUID                BLE_UUID_GATT               /**< Target device name that application is looking for. */


NRF_BLE_GATT_DEF(m_gatt);                                 /**< GATT module instance. */
NRF_BLE_SCAN_DEF(m_scan);                                 /**< Scanning Module instance. */
BLE_LBS_DEF(m_lbs);

static ble_advertising_t m_advertising;
//BLE_ADVERTISING_DEF(m_advertising);




APP_TIMER_DEF(m_scan_timer_id);
APP_TIMER_DEF(m_rest_timer_id);
APP_TIMER_DEF(m_conn_timer_id);

typedef struct
{
    uint8_t * p_data;   
    uint16_t  data_len; 
}data_t;




static uint16_t              m_conn_handle = BLE_CONN_HANDLE_INVALID;               /**< Current connection handle. */
static uint16_t              tx_power_level_char_handle = BLE_GATT_HANDLE_INVALID; // Initialize with an invalid handle
static bool                  m_whitelist_disabled;        /**< True if whitelist has been temporarily disabled. */
static bool                  m_memory_access_in_progress; /**< Flag to keep track of ongoing operations on persistent memory. */
static bool                  m_erase_bonds;               /**< Bool to determine if bonds should be erased before scanning starts. Based on button push upon startup. */



static uint8_t m_adv_handle = BLE_GAP_ADV_SET_HANDLE_NOT_SET;
static uint8_t m_enc_advdata[BLE_GAP_ADV_SET_DATA_SIZE_MAX];
static uint8_t m_enc_scan_response_data[BLE_GAP_ADV_SET_DATA_SIZE_MAX];

ble_uuid_t m_adv_uuids[] = 
{
  //{LBS_UUID_SERVICE, m_lbs.uuid_type}
  {BLE_UUID_DEVICE_INFORMATION_SERVICE, BLE_UUID_TYPE_BLE}
};

/**< Scan parameters requested for scanning and connection. */
static ble_gap_scan_params_t const m_scan_param =
{
    .active        = 0x01,
    .interval      = NRF_BLE_SCAN_SCAN_INTERVAL,
    .window        = NRF_BLE_SCAN_SCAN_WINDOW,
    .filter_policy = BLE_GAP_SCAN_FP_WHITELIST,
    .timeout       = SCAN_DURATION_WITELIST,
    .scan_phys     = BLE_GAP_PHY_1MBPS,
};


static void scan_start(void);
static void advertising_start(void);
static void advertising_init(void);



static char const m_target_periph_name[] = {"nRF Connect"};       /**< If you want to connect to a peripheral using a given advertising name, type its name here. */
static bool       is_connect_per_addr    = false;          /**< If you want to connect to a peripheral with a given address, set this to true and put the correct address in the variable below. */

static ble_gap_addr_t const m_target_periph_addr =
{
    /* Possible values for addr_type:
       BLE_GAP_ADDR_TYPE_PUBLIC,
       BLE_GAP_ADDR_TYPE_RANDOM_STATIC,
       BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE,
       BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE. */
      .addr_type = BLE_GAP_ADDR_TYPE_RANDOM_STATIC,
      .addr      = BLE_GAP_ADDR_TYPE_RANDOM_STATIC,
};


static ble_gap_adv_data_t m_adv_data =
{
  .adv_data = 
      {
        .p_data = m_enc_advdata,
        .len = BLE_GAP_ADV_SET_DATA_SIZE_MAX},

  .scan_rsp_data = 
      {
      
        .p_data = m_enc_scan_response_data,
        .len = BLE_GAP_ADV_SET_DATA_SIZE_MAX

      
      }};



 
void assert_nrf_callback(uint16_t line_num, const uint8_t * p_file_name)
{
    app_error_handler(0xDEADBEEF, line_num, p_file_name);
}


/**@brief Function for handling Peer Manager events.
 *
 * @param[in] p_evt  Peer Manager event.
 */
static void pm_evt_handler(pm_evt_t const * p_evt)
{
    
    pm_handler_on_pm_evt(p_evt);
    pm_handler_disconnect_on_sec_failure(p_evt);
    pm_handler_flash_clean(p_evt);

    switch (p_evt->evt_id)
    {
        case PM_EVT_PEERS_DELETE_SUCCEEDED:
            scan_start();
            //advertising_start();
            break;
       
        case PM_EVT_CONN_CONFIG_REQ:
        NRF_LOG_INFO("HEJ HEJ BONDING");
            pm_conn_sec_config_t conn_sec_config = {.allow_repairing = true};
            pm_conn_sec_config_reply(p_evt->conn_handle, &conn_sec_config);


        default:
            break;
    }
}


/**
 * @brief Function for shutdown events.
 *
 * @param[in]   event       Shutdown type.
 */
static bool shutdown_handler(nrf_pwr_mgmt_evt_t event)
{
    ret_code_t err_code;

    err_code = bsp_indication_set(BSP_INDICATE_IDLE);
    APP_ERROR_CHECK(err_code);

    switch (event)
    {
        case NRF_PWR_MGMT_EVT_PREPARE_WAKEUP:
            // Prepare wakeup buttons.
            err_code = bsp_btn_ble_sleep_mode_prepare();
            APP_ERROR_CHECK(err_code);
            break;

        default:
            break;
    }

    return true;
}


NRF_PWR_MGMT_HANDLER_REGISTER(shutdown_handler, APP_SHUTDOWN_HANDLER_PRIORITY);


/**@brief Function for handling BLE events.
 *
 * @param[in]   p_ble_evt   Bluetooth stack event.
 * @param[in]   p_context   Unused.
 */

 

 //Funktion som hanterar event, tex connection, disconnect, timoeout osv
static void ble_evt_handler(ble_evt_t const * p_ble_evt, void * p_context)
{
    ret_code_t            err_code;
    ble_gap_evt_t const * p_gap_evt = &p_ble_evt->evt.gap_evt;

    pm_handler_secure_on_connection(p_ble_evt);

    switch (p_ble_evt->header.evt_id)
    {


           /*case BLE_GAP_EVT_ADV_REPORT:{

             const ble_gap_evt_adv_report_t *p_adv_report = &p_ble_evt->evt.gap_evt.params.adv_report;

            // Parse the advertising data
            uint8_t *adv_data = p_adv_report->data.p_data;
            uint16_t adv_data_len = p_adv_report->data.len;

            for (uint16_t index = 0; index < adv_data_len; ) {
                uint8_t field_length = adv_data[index];
                uint8_t field_type = adv_data[index + 1];

                // Check for TX Power Level field type
                if (field_type == 0x0A) {
                    // Ensure the TX Power Level field is within bounds
                    if (index + 2 >= adv_data_len) {
                        NRF_LOG_WARNING("TX Power Level field exceeds adv data length");
                        break;
                    }

                    // The TX Power Level is a single byte signed integer
                    int8_t tx_power_level = (int8_t)adv_data[index + 2];
                    NRF_LOG_INFO("TX Power Level: %d dBm", tx_power_level);
                    if(tx_power_level == 4){
                    NRF_LOG_INFO("KontorNod TX Power Level: %d dBm", tx_power_level);
                    }
                    break; // Exit after finding the TX Power Level
                }

                index += field_length + 1; // Move to the next field
            }


           
          }break;*/
        
        case BLE_GAP_EVT_CONNECTED:
        {
            /*NRF_LOG_INFO("CONNECTED!!!");
            m_conn_handle = p_gap_evt->conn_handle;
            err_code      = bsp_indication_set(BSP_INDICATE_CONNECTED);
            APP_ERROR_CHECK(err_code);
            advertising_start();*/
            //NRF_LOG_INFO("STARTING 5 SECOND DISCONNECT TIMER!");
            //err_code = app_timer_start(m_conn_timer_id, CONNECTED_TIME, NULL);
            //APP_ERROR_CHECK(err_code);
            
            //err_code = sd_ble_gattc_primary_services_discover(m_conn_handle, 0, NULL);
            //APP_ERROR_CHECK(err_code);
            //if (ble_conn_state_central_conn_count() < NRF_SDH_BLE_CENTRAL_LINK_COUNT)
            //{
                
              //  scan_start();
                //advertising_start();
                
                
            //}


        NRF_LOG_INFO("CONNECTED, STOPPING SCAN...");
        nrf_ble_scan_stop();
        app_timer_stop_all();
        
        err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gap_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
        APP_ERROR_CHECK(err_code);
        NRF_LOG_INFO("DISCONNECTED")
        advertising_start();
      
        

        } break;
      
        

       /* case BLE_GATTC_EVT_PRIM_SRVC_DISC_RSP:
        {
          NRF_LOG_INFO("BLE_GATTC_RSP");

          ble_gattc_handle_range_t handle_range;
          for(int i = 0; i < p_ble_evt->evt.gattc_evt.params.prim_srvc_disc_rsp.count; i++){
            ble_gattc_service_t service = p_ble_evt->evt.gattc_evt.params.prim_srvc_disc_rsp.services[i];
            if(service.uuid.uuid == 0x1804 && service.uuid.type == BLE_UUID_TYPE_BLE){
              uint16_t tx_power_service_start_handle = service.handle_range.start_handle;
              uint16_t tx_power_service_end_handle = service.handle_range.end_handle; 
              handle_range.start_handle = tx_power_service_start_handle;
              handle_range.end_handle = tx_power_service_end_handle;
              
              err_code = sd_ble_gattc_characteristics_discover(m_conn_handle, &handle_range);
              APP_ERROR_CHECK(err_code);  
              
              break;
            }
          
         
            
          }
        
        
  
        
        }break;

        case BLE_GATTC_EVT_CHAR_DISC_RSP:
        {
            if(p_ble_evt->evt.gattc_evt.params.char_disc_rsp.count > 0){
              for(uint32_t i = 0; i < p_ble_evt->evt.gattc_evt.params.char_disc_rsp.count; i++){
                const ble_gattc_char_t *p_char = &(p_ble_evt->evt.gattc_evt.params.char_disc_rsp.chars[i]);

                if(p_char->uuid.uuid == 0x2A07 && p_char->uuid.type == BLE_UUID_TYPE_BLE){
                  tx_power_level_char_handle = p_char->handle_value;

                  err_code = sd_ble_gattc_read(m_conn_handle, tx_power_level_char_handle, 0);

                  break;
                }
              
              }
            
            
            }
        
        
        
        }break;


        case BLE_GATTC_EVT_READ_RSP:
        {
          if(p_ble_evt->evt.gattc_evt.params.read_rsp.handle == tx_power_level_char_handle)
          {
            uint8_t tx_power_level = p_ble_evt->evt.gattc_evt.params.read_rsp.data[0];
            NRF_LOG_INFO("TX Power Level Is: %d dBm", tx_power_level);
            NRF_LOG_FLUSH();
          }
        
        
      
        
        }break;*/

        case BLE_GAP_EVT_TIMEOUT:
        {
            if (p_gap_evt->params.timeout.src == BLE_GAP_TIMEOUT_SRC_CONN)
            {
                NRF_LOG_DEBUG("Connection Request timed out.");
            }
        } break;

        case BLE_GAP_EVT_CONN_PARAM_UPDATE_REQUEST:
        {
            // Accepting parameters requested by peer.
            err_code = sd_ble_gap_conn_param_update(p_gap_evt->conn_handle,
                                                    &p_gap_evt->params.conn_param_update_request.conn_params);
            APP_ERROR_CHECK(err_code);
        } break;

        case BLE_GAP_EVT_DISCONNECTED:
        {
            NRF_LOG_INFO("Disconnected. conn_handle: 0x%x, reason: 0x%x",
                         p_gap_evt->conn_handle,
                         p_gap_evt->params.disconnected.reason);
           err_code = pm_peers_delete();
           APP_ERROR_CHECK(err_code);
            

            /*if (ble_conn_state_central_conn_count() < NRF_SDH_BLE_CENTRAL_LINK_COUNT)
            {
                scan_start();
            }*/
        } break;

        case BLE_GAP_EVT_PHY_UPDATE_REQUEST:
        {
            NRF_LOG_DEBUG("PHY update request.");
            ble_gap_phys_t const phys =
            {
                .rx_phys = BLE_GAP_PHY_AUTO,
                .tx_phys = BLE_GAP_PHY_AUTO,
            };
            err_code = sd_ble_gap_phy_update(p_ble_evt->evt.gap_evt.conn_handle, &phys);
            APP_ERROR_CHECK(err_code);
        } break;

        case BLE_GATTC_EVT_TIMEOUT:
        {
            // Disconnect on GATT Client timeout event.
            NRF_LOG_DEBUG("GATT Client Timeout.");
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gattc_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
        } break;

        case BLE_GATTS_EVT_TIMEOUT:
        {
            // Disconnect on GATT Server timeout event.
            NRF_LOG_DEBUG("GATT Server Timeout.");
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gatts_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
        } break;

        default:
            break;
    }
}


/**
 * @brief SoftDevice SoC event handler.
 *
 * @param[in] evt_id    SoC event.
 * @param[in] p_context Context.
 */
static void soc_evt_handler(uint32_t evt_id, void * p_context)
{
    switch (evt_id)
    {
        case NRF_EVT_FLASH_OPERATION_SUCCESS:
        /* fall through */
        case NRF_EVT_FLASH_OPERATION_ERROR:

            if (m_memory_access_in_progress)
            {
                m_memory_access_in_progress = false;
                scan_start();
            }
            break;

        default:
            // No implementation needed.
            break;
    }
}


/**@brief Function for initializing the BLE stack.
 *
 * @details Initializes the SoftDevice and the BLE event interrupt.
  */
static void ble_stack_init(void)
{
    ret_code_t err_code;

    err_code = nrf_sdh_enable_request();
    APP_ERROR_CHECK(err_code);

    // Configure the BLE stack using the default settings.
    // Fetch the start address of the application RAM.
    uint32_t ram_start = 0;
    err_code = nrf_sdh_ble_default_cfg_set(APP_BLE_CONN_CFG_TAG, &ram_start);
    APP_ERROR_CHECK(err_code);

    // Enable BLE stack.
    err_code = nrf_sdh_ble_enable(&ram_start);
    APP_ERROR_CHECK(err_code);

    // Register handlers for BLE and SoC events.
    NRF_SDH_BLE_OBSERVER(m_ble_observer, APP_BLE_OBSERVER_PRIO, ble_evt_handler, NULL);
    //NRF_SDH_SOC_OBSERVER(m_soc_observer, APP_SOC_OBSERVER_PRIO, soc_evt_handler, NULL);
}


/**@brief Function for disabling the use of whitelist for scanning.
 */
static void whitelist_disable(void)
{
    if (!m_whitelist_disabled)
    {
        NRF_LOG_INFO("Whitelist temporarily disabled.");
        m_whitelist_disabled = true;
        nrf_ble_scan_stop();
        scan_start();
    }
}


/**@brief Function for handling events from the BSP module.
 *
 * @param[in]   event   Event generated by button press.
 */
void bsp_event_handler(bsp_event_t event)
{
    ret_code_t err_code;

    switch (event)
    {
        case BSP_EVENT_SLEEP:
            nrf_pwr_mgmt_shutdown(NRF_PWR_MGMT_SHUTDOWN_GOTO_SYSOFF);
            break;

        case BSP_EVENT_DISCONNECT:
            err_code = sd_ble_gap_disconnect(m_conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            if (err_code != NRF_ERROR_INVALID_STATE)
            {
                APP_ERROR_CHECK(err_code);
            }
            break;

        case BSP_EVENT_WHITELIST_OFF:
            whitelist_disable();
            break;

        case BSP_EVENT_KEY_2:
            // Note that to simplify this example, we are not actually making any changes to our
            // database (Which is normally when you would want to send this indication).
            // Acting upon this indication (doing a rediscovery) is pointless for the peer.
            pm_local_database_has_changed();
            break;
        default:
            break;
    }
}


/**@brief Function for the Peer Manager initialization.
 *
 * @param[in] erase_bonds  Indicates whether bonding information should be cleared from
 *                         persistent storage during initialization of the Peer Manager.
 */
static void peer_manager_init()
{
    ble_gap_sec_params_t sec_param;
    ret_code_t           err_code;

    err_code = pm_init();
    APP_ERROR_CHECK(err_code);

    memset(&sec_param, 0, sizeof(ble_gap_sec_params_t));

    // Security parameters to be used for all security procedures.
    sec_param.bond           = SEC_PARAM_BOND;
    sec_param.mitm           = SEC_PARAM_MITM;
    sec_param.lesc           = SEC_PARAM_LESC;
    sec_param.keypress       = SEC_PARAM_KEYPRESS;
    sec_param.io_caps        = SEC_PARAM_IO_CAPABILITIES;
    sec_param.oob            = SEC_PARAM_OOB;
    sec_param.min_key_size   = SEC_PARAM_MIN_KEY_SIZE;
    sec_param.max_key_size   = SEC_PARAM_MAX_KEY_SIZE;
    sec_param.kdist_own.enc  = 1;
    sec_param.kdist_own.id   = 1;
    sec_param.kdist_peer.enc = 1;
    sec_param.kdist_peer.id  = 1;

    err_code = pm_sec_params_set(&sec_param);
    APP_ERROR_CHECK(err_code);

    err_code = pm_register(pm_evt_handler);
    APP_ERROR_CHECK(err_code);
}


/**@brief Clear bond information from persistent storage.
 */
static void delete_bonds(void)
{
    ret_code_t err_code;

    NRF_LOG_INFO("Erase bonds.");
    err_code = pm_peers_delete();
    APP_ERROR_CHECK(err_code);
}


/**@brief Retrive a list of peer manager peer IDs.
 *
 * @param[inout] p_peers   The buffer where to store the list of peer IDs.
 * @param[inout] p_size    In: The size of the @p p_peers buffer.
 *                         Out: The number of peers copied in the buffer.
 */
static void peer_list_get(pm_peer_id_t * p_peers, uint32_t * p_size)
{
    pm_peer_id_t peer_id;
    uint32_t     peers_to_copy;

    peers_to_copy = (*p_size < BLE_GAP_WHITELIST_ADDR_MAX_COUNT) ?
                     *p_size : BLE_GAP_WHITELIST_ADDR_MAX_COUNT;

    peer_id = pm_next_peer_id_get(PM_PEER_ID_INVALID);
    *p_size = 0;

    while ((peer_id != PM_PEER_ID_INVALID) && (peers_to_copy--))
    {
        p_peers[(*p_size)++] = peer_id;
        peer_id              = pm_next_peer_id_get(peer_id);
    }
}


static void whitelist_load()
{
    ret_code_t   ret;
    pm_peer_id_t peers[8];
    uint32_t     peer_cnt;

    memset(peers, PM_PEER_ID_INVALID, sizeof(peers));
    peer_cnt = (sizeof(peers) / sizeof(pm_peer_id_t));

    // Load all peers from flash and whitelist them.
    peer_list_get(peers, &peer_cnt);

    ret = pm_whitelist_set(peers, peer_cnt);
    APP_ERROR_CHECK(ret);

    // Setup the device identities list.
    // Some SoftDevices do not support this feature.
   /* ret = pm_device_identities_list_set(peers, peer_cnt);
    if (ret != NRF_ERROR_NOT_SUPPORTED)
    {
        APP_ERROR_CHECK(ret);
    }
    */
}


static void on_whitelist_req(void)
{
    // Whitelist buffers.
    ble_gap_addr_t whitelist_addrs[8];
    ble_gap_irk_t  whitelist_irks[8];

    memset(whitelist_addrs, 0x00, sizeof(whitelist_addrs));
    memset(whitelist_irks, 0x00, sizeof(whitelist_irks));

    uint32_t addr_cnt = (sizeof(whitelist_addrs) / sizeof(ble_gap_addr_t));
    uint32_t irk_cnt  = (sizeof(whitelist_irks) / sizeof(ble_gap_irk_t));

    // Reload the whitelist and whitelist all peers.
    whitelist_load();

    ret_code_t err_code;

    // Get the whitelist previously set using pm_whitelist_set().
    err_code = pm_whitelist_get(whitelist_addrs, &addr_cnt,
                                whitelist_irks, &irk_cnt);

    if (((addr_cnt == 0) && (irk_cnt == 0)) ||
        (m_whitelist_disabled))
    {
        // Don't use whitelist.
        err_code = nrf_ble_scan_params_set(&m_scan, NULL);
        APP_ERROR_CHECK(err_code);
    }

    NRF_LOG_INFO("Starting scan.");

    err_code = bsp_indication_set(BSP_INDICATE_SCANNING);
    APP_ERROR_CHECK(err_code);
}


/**@brief Function to start scanning.
 */
static void scan_start(void)
{
    ret_code_t err_code;
    
    // If there is any pending write to flash, defer scanning until it completes.
    if (nrf_fstorage_is_busy(NULL))
    {
        m_memory_access_in_progress = true;
        return;
    }

    err_code = nrf_ble_scan_params_set(&m_scan, &m_scan_param);
    APP_ERROR_CHECK(err_code);

    err_code = nrf_ble_scan_start(&m_scan);
    APP_ERROR_CHECK(err_code);

    NRF_LOG_INFO("STARTING 30 SECOND SCAN TIMER");
    err_code = app_timer_start(m_scan_timer_id, SCAN_TIMER_INTERVAL, NULL);
    APP_ERROR_CHECK(err_code);
    
    
}

//------------------------HJÄLP FUNKTIONER TILL TIMER-------------------------//
//Callback funktion, ropas när timer i scan_start expires
//stoppa scanning, starta igen efter 10 sekunder
static void scan_timer_handler(void * p_context)
{
  ret_code_t err_code;

  nrf_ble_scan_stop();

  NRF_LOG_INFO("STOPPING SCAN FOR 10 SECONDS");
  err_code = app_timer_start(m_rest_timer_id, REST_TIMER_INTERVAL, NULL);
  APP_ERROR_CHECK(err_code);
  
  nrf_pwr_mgmt_run();//low power mode
}

//INIT SCAN TIMER
//specifiera callback funktion, kopplar timer id till scan_time_handler funktionen
static void scan_timer_init(void)
{
  ret_code_t err_code = app_timer_create(&m_scan_timer_id, APP_TIMER_MODE_SINGLE_SHOT, scan_timer_handler);
  APP_ERROR_CHECK(err_code);
}


//Callback funktion, ropas när timer i scan_time_handler expires
//startar scanning igen
static void rest_timer_handler(void * p_context)
{
  
  NRF_LOG_INFO("STARTING SCAN");
  scan_start();
}

//INIT REST TIMER
static void rest_timer_init(void)
{
ret_code_t err_code;

err_code = app_timer_create(&m_rest_timer_id, APP_TIMER_MODE_SINGLE_SHOT, rest_timer_handler);
}



/*static void conn_time_handler(void * p_context)
{
  NRF_LOG_INFO("DISCONNECTING DEVICE...");
  ret_code_t err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_LOCAL_HOST_TERMINATED_CONNECTION);

  APP_ERROR_CHECK(err_code);

  err_code = pm_peers_delete();
  
  APP_ERROR_CHECK(err_code);
  if (ble_conn_state_central_conn_count() < NRF_SDH_BLE_CENTRAL_LINK_COUNT)
    {
                
         scan_start();
                //advertising_start();
                
                
    }
  


}

static void conn_timer_init()
{
  ret_code_t err_code;

  err_code = app_timer_create(&m_conn_timer_id, APP_TIMER_MODE_SINGLE_SHOT, conn_time_handler);


}
*/



//-------------------------------------------------------------------------------//

/**@brief Function for initializing buttons and LEDs.
 *
 * @param[out] p_erase_bonds  Will be true if the clear bonding button was pressed to wake the application up.
 */
static void buttons_leds_init(bool * p_erase_bonds)
{
    ret_code_t  err_code;
    bsp_event_t startup_event;

    err_code = bsp_init(BSP_INIT_LEDS | BSP_INIT_BUTTONS, bsp_event_handler);
    APP_ERROR_CHECK(err_code);

    err_code = bsp_btn_ble_init(NULL, &startup_event);
    APP_ERROR_CHECK(err_code);

    *p_erase_bonds = (startup_event == BSP_EVENT_CLEAR_BONDING_DATA);
}


/**@brief Function for initializing logging. */
static void log_init(void)
{
    ret_code_t err_code = NRF_LOG_INIT(NULL);

    APP_ERROR_CHECK(err_code);

    NRF_LOG_DEFAULT_BACKENDS_INIT();
}


/**@brief Function for initializing the timer. */
static void timer_init(void)
{
    ret_code_t err_code = app_timer_init();
    APP_ERROR_CHECK(err_code);

}


/**@brief Function for initializing the GATT module. */
static void gatt_init(void)
{
    ret_code_t err_code = nrf_ble_gatt_init(&m_gatt, NULL);

    APP_ERROR_CHECK(err_code);
}

//----------------------------ADVERTISEMENT-----------------------------//

static void gap_params_init(void)
{
ret_code_t            err_code;
ble_gap_conn_params_t gap_conn_params;
ble_gap_conn_sec_mode_t sec_mode;


BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);

err_code = sd_ble_gap_device_name_set(&sec_mode, 
                                    (const uint8_t *)DKDEVICE_NAME, 
                                    strlen(DKDEVICE_NAME));
APP_ERROR_CHECK(err_code);

memset(&gap_conn_params, 0, sizeof(gap_conn_params));

gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;
gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;
gap_conn_params.slave_latency     = SLAVE_LATENCY;
gap_conn_params.conn_sup_timeout  = CONN_SUP_TIMEOUT;


sd_ble_gap_ppcp_set(&gap_conn_params);
APP_ERROR_CHECK(err_code);

}


/*static void advertising_init(void)
{



ret_code_t err_code;
ble_advertising_t init;
ble_advdata_t advdata;

memset(&advdata, 0, sizeof(advdata));

advdata.name_type = BLE_ADVDATA_FULL_NAME;
advdata.flags     = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;


memset(&init, 0, sizeof(init))

init.advdata = advdata;

err_code = ble_advertising_init(&m_advertising, &init);
APP_ERROR_CHECK(err_code);

ble_advertising_conn_cfg_tag_set(&m_advertising, APP_BLE_CONN_CFG_TAG)



















  /*ret_code_t err_code;
  ble_advdata_t advdata;
  ble_advdata_t srdata;

  ble_uuid_t adv_uuids[] = {{LBS_UUID_SERVICE, m_lbs.uuid_type}};

  memset(&advdata, 0, sizeof(advdata));

  advdata.name_type = BLE_ADVDATA_FULL_NAME;
  advdata.include_appearance = true;
  advdata.flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;

  memset(&srdata, 0, sizeof(srdata));

  srdata.uuids_complete.uuid_cnt = sizeof(adv_uuids) / sizeof(adv_uuids[0]);
  srdata.uuids_complete.p_uuids = adv_uuids;


 
  
  err_code = ble_advdata_encode(&advdata, m_adv_data.adv_data.p_data, &m_adv_data.adv_data.len);
  APP_ERROR_CHECK(err_code);

   err_code = ble_advdata_encode(&srdata, m_adv_data.scan_rsp_data.p_data, &m_adv_data.scan_rsp_data.len);
  APP_ERROR_CHECK(err_code);
  

  ble_gap_adv_params_t adv_params;


  memset(&adv_params, 0, sizeof(adv_params));

  adv_params.primary_phy     = BLE_GAP_PHY_1MBPS;
  adv_params.duration        = APP_ADV_DURATION;
  adv_params.properties.type = BLE_GAP_ADV_TYPE_CONNECTABLE_SCANNABLE_UNDIRECTED;
  adv_params.p_peer_addr     = NULL;
  adv_params.filter_policy   = BLE_GAP_ADV_FP_ANY;
  adv_params.interval        = APP_ADV_INTERVAL;

  err_code = sd_ble_gap_adv_set_configure(&m_adv_handle, &m_adv_data, &adv_params);
  APP_ERROR_CHECK(err_code);
  





}*/

static void advertising_init(void)
{
  ret_code_t err_code;
  ble_advertising_init_t init;


  memset(&init, 0, sizeof(init));

  //specifiera advertisement data
  ble_advdata_manuf_data_t           manuf_data; //variabel som håller manufacturer data
  uint8_t data[]                     = "TJA"; //adv data
  manuf_data.company_identifier      = 0x0059; //nordics company ID
  manuf_data.data.p_data             = data;
  manuf_data.data.size               = sizeof(data);
  init.advdata.p_manuf_specific_data = &manuf_data;
  
 



  //bygga adv data struct

  init.advdata.name_type               = BLE_ADVDATA_SHORT_NAME;
  init.advdata.short_name_len          = 6; //advertise bara första 6 bokstäver of name
  init.advdata.include_appearance      = true;
  init.advdata.flags                   = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
  init.advdata.uuids_complete.uuid_cnt = sizeof(m_adv_uuids) / sizeof(m_adv_uuids[0]);
  init.advdata.uuids_complete.p_uuids  = m_adv_uuids;

  int8_t tx_power                      = -4;



  //förbered scan response
  ble_advdata_manuf_data_t               manuf_data_response;
  uint8_t                                data_response[] = "Many_bytes_of_data";
  manuf_data_response.company_identifier = 0x0059;
  manuf_data_response.data.p_data        = data_response;
  manuf_data_response.data.size          = sizeof(data_response);
  init.srdata.name_type                  = BLE_ADVDATA_NO_NAME;
  init.srdata.p_manuf_specific_data      = &manuf_data_response;


  init.config.ble_adv_fast_enabled       = true;
  init.config.ble_adv_fast_interval      = APP_ADV_INTERVAL;
  init.config.ble_adv_fast_timeout       = APP_ADV_DURATION;
  

  ble_gap_adv_params_t adv_params;
  //adv parameters
  memset(&adv_params, 0, sizeof(adv_params));

  adv_params.primary_phy = BLE_GAP_PHY_1MBPS;
  adv_params.duration = APP_ADV_DURATION;
  adv_params.properties.type = BLE_GAP_ADV_TYPE_CONNECTABLE_SCANNABLE_UNDIRECTED;
  adv_params.p_peer_addr = NULL;
  adv_params.filter_policy = BLE_GAP_ADV_FP_ANY;
  adv_params.interval = APP_ADV_INTERVAL;


  err_code = ble_advertising_init(&m_advertising, &init);
  APP_ERROR_CHECK(err_code);

  ble_advertising_conn_cfg_tag_set(&m_advertising, APP_BLE_CONN_CFG_TAG);
  
}


/*static void advertising_init(void)
{
  ret_code_t err_code;
  ble_advdata_t advdata;
  ble_advdata_t srdata;

  ble_uuid_t adv_uuids[] = {{LBS_UUID_SERVICE, m_lbs.uuid_type}};

  NRF_LOG_INFO("JAG ÄR I INIT");


  //build and set adv data
  memset(&advdata, 0, sizeof(advdata));

  advdata.name_type = BLE_ADVDATA_FULL_NAME;
  advdata.include_appearance = true;
  advdata.flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;

  memset(&srdata, 0, sizeof(srdata));
  srdata.uuids_complete.uuid_cnt = sizeof(adv_uuids) / sizeof(adv_uuids[0]);
  srdata.uuids_complete.p_uuids = adv_uuids;

  err_code = ble_advdata_encode(&advdata, m_adv_data.adv_data.p_data, &m_adv_data.adv_data.len);
  APP_ERROR_CHECK(err_code);

  //err_code = ble_advdata_encode(&srdata, m_adv_data.scan_rsp_data.p_data, &m_adv_data.scan_rsp_data.len);
  //APP_ERROR_CHECK(err_code);

  ble_gap_adv_params_t adv_params;
  //adv parameters
  memset(&adv_params, 0, sizeof(adv_params));

  adv_params.primary_phy = BLE_GAP_PHY_1MBPS;
  adv_params.duration = APP_ADV_DURATION;
  adv_params.properties.type = BLE_GAP_ADV_TYPE_CONNECTABLE_SCANNABLE_UNDIRECTED;
  adv_params.p_peer_addr = NULL;
  adv_params.filter_policy = BLE_GAP_ADV_FP_ANY;
  adv_params.interval = APP_ADV_INTERVAL;
  

  err_code = sd_ble_gap_adv_set_configure(&m_adv_handle, &m_adv_data, &adv_params);
}

static void on_adv_evt(ble_adv_evt_t ble_adv_evt)
{
  ret_code_t err_code;

    switch (ble_adv_evt)
    {
        case BLE_ADV_EVT_FAST:
            NRF_LOG_INFO("Fast advertising.");
            err_code = bsp_indication_set(BSP_INDICATE_ADVERTISING);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_ADV_EVT_IDLE:
             nrf_pwr_mgmt_run();
              
            break;

        default:
            break;
    }

}*/




static void on_conn_params_evt(ble_conn_params_evt_t *p_evt)
{
  ret_code_t err_code;

  if(p_evt->evt_type == BLE_CONN_PARAMS_EVT_FAILED){
    err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
    APP_ERROR_CHECK(err_code);
  
  
  }



}


static void conn_params_error_handler(uint32_t nrf_error){
  APP_ERROR_HANDLER(nrf_error);
}


static void conn_params_init(void) {
  ret_code_t err_code;
  ble_conn_params_init_t cp_init;

  memset(&cp_init, 0, sizeof(cp_init));

  cp_init.p_conn_params = NULL;
  cp_init.first_conn_params_update_delay = FIRST_CONN_PARAMS_UPDATE_DELAY;
  cp_init.next_conn_params_update_delay = NEXT_CONN_PARAMS_UPDATE_DELAY;
  cp_init.max_conn_params_update_count = MAX_CONN_PARAMS_UPDATE_COUNT;
  cp_init.start_on_notify_cccd_handle = BLE_GATT_HANDLE_INVALID;
  cp_init.disconnect_on_fail = false;
  cp_init.evt_handler = on_conn_params_evt;
  cp_init.error_handler = conn_params_error_handler;

  err_code = ble_conn_params_init(&cp_init);
  APP_ERROR_CHECK(err_code);
}





static void advertising_start(void){

//delete_bonds();
NRF_LOG_INFO("ADVERTISING BBY!");
ret_code_t err_code = sd_ble_gap_adv_start(m_adv_handle, APP_BLE_CONN_CFG_TAG);
//ret_code_t err_code = ble_advertising_start(&m_advertising, BLE_ADV_MODE_FAST);

APP_ERROR_CHECK(err_code);
   
}

static void advertising_stop(void){
NRF_LOG_INFO("STOPPING ADVERTISING...");
ret_code_t err_code = sd_ble_gap_adv_stop(m_adv_handle);

APP_ERROR_CHECK(err_code);
}




// error handle funktion
static void nrf_qwr_error_handler(uint32_t nrf_error) {
  APP_ERROR_HANDLER(nrf_error);
}






//----------------------------------------------------------------------//



/**@brief Function for initializing the power management.
 */
static void power_management_init(void)
{
    ret_code_t err_code;
    err_code = nrf_pwr_mgmt_init();
    APP_ERROR_CHECK(err_code);
}


static void scan_evt_handler(scan_evt_t const * p_scan_evt)
{
    ret_code_t err_code;
    switch(p_scan_evt->scan_evt_id)
    {
        case NRF_BLE_SCAN_EVT_WHITELIST_REQUEST:
        {
            on_whitelist_req();
            m_whitelist_disabled = false;
        } break;

        case NRF_BLE_SCAN_EVT_CONNECTING_ERROR:
        {
            err_code = p_scan_evt->params.connecting_err.err_code;
            APP_ERROR_CHECK(err_code);
        } break;

        case NRF_BLE_SCAN_EVT_SCAN_TIMEOUT:
        {
            NRF_LOG_INFO("Scan timed out.");
            scan_start();
        } break;

        case NRF_BLE_SCAN_EVT_FILTER_MATCH:
            break;
        case NRF_BLE_SCAN_EVT_WHITELIST_ADV_REPORT:
            break;

        default:
          break;
    }
}


/**@brief Function for initializing scanning.
 */
static void scan_init(void)
{
    ret_code_t err_code;
    nrf_ble_scan_init_t init_scan;

    memset(&init_scan, 0, sizeof(init_scan));

    init_scan.p_scan_param     = &m_scan_param;
    init_scan.connect_if_match = true;
    init_scan.conn_cfg_tag     = APP_BLE_CONN_CFG_TAG;

    err_code = nrf_ble_scan_init(&m_scan, &init_scan, scan_evt_handler);
    APP_ERROR_CHECK(err_code);
}


/**@ Function for settings scan filters.
 */
static void scan_filters_set(void)
{
    ret_code_t err_code;
    ble_uuid_t target_uuid = {.uuid = TARGET_UUID, .type = BLE_UUID_TYPE_BLE};

    err_code = nrf_ble_scan_filter_set(&m_scan, SCAN_NAME_FILTER, m_target_periph_name);
    APP_ERROR_CHECK(err_code);

    err_code = nrf_ble_scan_filter_set(&m_scan, SCAN_UUID_FILTER, &target_uuid);
    APP_ERROR_CHECK(err_code);

    if (is_connect_per_addr)
    {
        err_code = nrf_ble_scan_filter_set(&m_scan, SCAN_ADDR_FILTER, m_target_periph_addr.addr);
        APP_ERROR_CHECK(err_code);
        err_code = nrf_ble_scan_filters_enable(&m_scan,
                       NRF_BLE_SCAN_NAME_FILTER | NRF_BLE_SCAN_UUID_FILTER | NRF_BLE_SCAN_ADDR_FILTER,
                       false);
        APP_ERROR_CHECK(err_code);
    }
    else
    {
        err_code = nrf_ble_scan_filters_enable(&m_scan,
                       NRF_BLE_SCAN_NAME_FILTER | NRF_BLE_SCAN_UUID_FILTER,
                       false);
        APP_ERROR_CHECK(err_code);
    }
}


/**@brief Function for handling the idle state (main loop).
 *
 * @details Handle any pending log operation(s), then sleep until the next event occurs.
 */
static void idle_state_handle(void)
{
    if (NRF_LOG_PROCESS() == false)
    {
        nrf_pwr_mgmt_run();
    }
}


/**@brief Function for starting a scan, or instead trigger it from peer manager (after
          deleting bonds).

   @param[in] p_erase_bonds Pointer to a bool to determine if bonds will be deleted before scanning.
*/
void scanning_start(bool * p_erase_bonds)
{
    // Start scanning for peripherals and initiate connection
    // with devices that advertise GATT Service UUID.
    if (*p_erase_bonds == true)
    {
        // Scan is started by the PM_EVT_PEERS_DELETE_SUCCEEDED event.
        delete_bonds();
    }
    else
    {
        scan_start();
    }
}





/**@brief Function for initializing all the modules used in this example application.
 */
static void modules_init(void)
{
    // Initialize alla moduler.
    log_init();
    timer_init();
    buttons_leds_init(&m_erase_bonds);
    power_management_init();
    ble_stack_init();
    gatt_init();
    gap_params_init();
    conn_params_init();
    peer_manager_init();
    scan_init();
    scan_filters_set();
    rest_timer_init();
    scan_timer_init();
    advertising_init();
    
   
   // conn_timer_init();
}

int main(void)
{
 
    // Initialize.
    modules_init();
    whitelist_load();
    

    // Start execution.
    NRF_LOG_INFO("GATT Service server started. Parkeringslösning Capgemini");
    
    scanning_start(&m_erase_bonds);

    // Enter main loop.
    for (;;)
    {
        idle_state_handle();
    }
}
